"""
Created on Fri Feb 21 11:58:39 2020

Recording DATA  -  National Instrument

@author: VERNET Marlone

"""

import sys
sys.path.insert(1,'/Users/Gissinger/Desktop/tp_von_karman/python_NI/')

import PyDAQmx as nidaq #import the module to record data with NI
import numpy as np
import ctypes as ct
import matplotlib.pyplot as plt
import time
import scipy.signal as sc
import pickle 
import matplotlib.animation as animation

import os

%matplotlib notebook  


#plt.rcParams.update({'font.size': 22})

def calibration_hot_wire(A,B,e):
    #Warning : La fonction commentée ci-dessous n'est pas bonne, il faut prendre l'inverse !
    #A vous de jouer !
    return ((e**2-A)**2)/B
    print("PROBLEM DANS CALIBRATION8HOT8WIRE")
    dsdssd;
    
    
    def aquire(timeout):    
    conversion_fp = 1/22.27 #Bar/V (do not change)
    calib_A =1.052 # a déterminer et a faire tourner
    calib_B =0.585 # a determiner et a faire tourner

    """ Do Not Change """
    analog_input = nidaq.Task() # initiate NI measurement
    int32 = ct.c_long
    read = int32()

    """ Options of recording """
    folder = "C:/Users/Gissinger/Desktop/tp_von_karman/data_coco_emilie/" # folder where to put the data : put your names
    if not os.path.exists(folder):
        os.makedirs(folder)

    number = 4
    #field_name = "velocity" 
    field_name = "pressure"

    """ Options of acquisition """
    #timeout =2#acquisition time in second
    num = 1 # number of recorded channels - do not change
    dev = "Dev7" # moniteur de périphérique : entrée USB
    df = 5000.0 # acquisition frequency 
    channel = "/ai0"


    """ Recording part """
    #name = field_name+str(timeout)+'s'+str(number)+".pkl" # field_name + acquis_time + number of measure (signal/ bruit)
    name = field_name+str(number)+".pkl" # name -> profile de vitesse, fluctuation de pressions...


    deltaT = int(timeout*int(df))
    data = np.zeros((deltaT*num,), dtype=np.float64)

    #RECORDING PART 
    delay = 5 # delay before reading the data (DO NOT CHANGE)

    #nidaq mode
    #mode = "differential"
    mode = "single-ended"

    if mode == "default":
        nidaq_mode = nidaq.DAQmx_Val_Cfg_Default
    elif mode == "differential":
        nidaq_mode = nidaq.DAQmx_Val_Diff
    elif mode == "single-ended":
        nidaq_mode = nidaq.DAQmx_Val_RSE #for referenced single-ended

    # DAQmx Configure Code
    analog_input.CreateAIVoltageChan(dev+channel,"",nidaq_mode,-5.0,5.0,nidaq.DAQmx_Val_Volts,None)
    analog_input.CfgSampClkTiming("",df,nidaq.DAQmx_Val_Rising,nidaq.DAQmx_Val_FiniteSamps,deltaT)


    # DAQmx Start Code
    analog_input.StartTask()

    tt=time.time()

    # DAQmx Read Code
    # analog_input.ReadAnalogF64(deltaT,deltaT,nidaq.DAQmx_Val_GroupByChannel,data,deltaT,nidaq.byref(read),None) #DAQmx_Val_GroupByChannel
    analog_input.ReadAnalogF64(deltaT,timeout+delay,nidaq.DAQmx_Val_GroupByChannel,data,len(data),nidaq.byref(read),None) #DAQmx_Val_GroupByChannel


    analog_input.ClearTask()

    print("Acquisition Done, t = ")
    print(time.time() - tt)


    """ Display the temporal signals """
    t=np.linspace(0,deltaT/df,deltaT)
    gain = 100 #gain pressure

    if field_name == 'pressure':
        data_ = data*conversion_fp/gain #conversion data pression V -> Bar

    if field_name == 'velocity':
        data_ = calibration_hot_wire(calib_A, calib_B, data)

    plt.figure()
    plt.plot(t,data_)
    plt.grid()
    plt.title(channel)
    plt.show()
    #print(np.mean(data_))
    #print(np.std(data_))

    """ Recording the data in the labtop """

    with open(folder+name, "wb") as fp:   #Pickling
        pickle.dump(data_, fp)
    
    #hist, bin = np.histogram(data_, 40)
    #print(hist)
    #print(bin)
    
    #plt.figure()
    #plt.semilogy(bin[:-1], hist)
    #plt.grid()
    #plt.title(channel)
    #plt.show()
    
    #plt.figure()
    #plt.plot(bin[:-1], hist)
    #plt.grid()
    #plt.title(channel)
    #plt.show()
    
    return data_

def iterate(N, time):
    std_list = []
    perr = 0
    for i in range(N):
        std = aquire(time)
        std_list.append(std)
    
    std_mean = np.mean(std_list)
    
    for l in range(N):
        perr += (std_list[l]-std_mean)**2 
    
    perr = (1/(N-1))*perr
        
    return std_mean, perr
    
    
    # Let's see the evolution of the std_mean when we increase the timeout

std_mean_list = []
perr_list = []
t2 = []

for time1 in range(1, 41, 1):
    time1 *= 1e-1
    print(time1)
    t2.append(time1)
    mean, perri = iterate(10, time1)
    std_mean_list.append(mean)
    perr_list.append(perri)
    
    
print(std_mean_list, t2, perr_list)
print("done")


#Let's plot the evolution of the std_mean when we increase the aquisition time

plt.figure()
plt.plot(t2,std_mean_list)
plt.grid()
plt.title("evolution of std_mean with regards to aquisition time")
plt.show()


#Let's plot perr

plt.figure()
plt.plot(t2,perr_list)
plt.grid()
plt.title("evolution of perr with regards to aquisition time")
plt.xlabel("X axis label")
plt.ylabel("Y axis label")
plt.show()


data_ = aquire(600)
df = 5000.0

pressure=data_-np.mean(data_)
fv, psd_v = sc.welch(pressure, fs=df, nperseg=df)
plt.figure()
#plt.loglog(fv[30:-10],psd_v[30:-10])
plt.plot(fv,psd_v)
plt.show()


#def f(x,a,b):
    #return a*x+b
#import scipy.optimize
#p_opt,y=scipy.optimize.curve_fit(f,np.log10(fv[30:-10]),np.log10(psd_v[30:-10]),[1,1])
#print(p_opt)

plt.loglog(fv,psd_v)
plt.show()

print(fv, psd_v)

with open("fd_4.5_volt.txt", "w")as filout:
    for item in fv :
        filout.write(f"{item}"+" ")
    
with open("psd_4.5_volt", "w")as fil:
    for item in psd_v:
        fil.write(f"{item}"+ " ")
        
        
with open("data_4.5_volt_600.txt", "w")as fichier:
    for item in data_:
        fichier.write(f"{item}"+" ")
        




import matplotlib.pyplot

def interval(data, seuil):
    stock = 0
    time = 0
    liste_interval = []
    for item in data :
        time += (1/5000)
        if item <= seuil and (time-stock>0.01):
            liste_interval.append(time-stock)
            stock = time
    return liste_interval

recup = 
print(interval(data_, (-0.00027)))
print(min(data_))

